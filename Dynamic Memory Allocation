/*
operator new：该函数实际通过malloc来申请空间，当malloc申请空间成功时直接返回；申请空间
失败，尝试执行空               间不足应对措施，如果改应对措施用户设置了，则继续申请，否
则抛异常。
*/
void* __crtdecl operator new(size_t size) _throw1(_std bad_alloc)
{
	// try to allocate size bytes
	void* p;
	while ((p = malloc(size)) == 0)
        if (_callnewh(size) == 0)
        {
            // report no memory
            // 如果申请内存失败了，这里会抛出bad_alloc 类型异常
            static const std::bad_alloc nomem;
            _raise(nomem);
        }
    return (p);
}
/*
operator delete: 该函数最终是通过free来释放空间的
*/
void operator delete(void* puserdata)
{
    _crtmemblockheader* phead;
    rtccallback(_rtc_free_hook, (puserdata, 0));
    if (puserdata == null)
        return;
    _mlock(_heap_lock);  /* block other threads */
    __try
        /* get a pointer to memory block header */
        phead = phdr(puserdata);
    /* verify block type */
    _asserte(_block_type_is_valid(phead->nblockuse));
    _free_dbg(puserdata, phead->nblockuse);
    __finally
        _munlock(_heap_lock);  /* release other threads */
    __end_try_finally
        return;
}
/*
free的实现
*/
#define   free(p)               _free_dbg(p, _normal_block)

int main()
{
	while (1)
	{
		int ret = (int*)malloc(sizeof(int) * 500);
	}
}

int main()
{
	int* p = new int[10];
	// 将该函数放在main函数之后，每次程序退出的时候就会检测是否存在内存泄漏
	_crtdumpmemoryleaks();
	return 0;
}
////////////////////////////////////////////////////////
// 程序退出后，在输出窗口中可以检测到泄漏了多少字节，但是没有具体的位置
detected memory leaks!
dumping objects ->
{79} normal block at 0x00ec5fb8, 40 bytes long.
data: <                > cd cd cd cd cd cd cd cd cd cd cd cd cd cd cd cd
object dump complete.

class A
{
public:
	A(int a = 0)
		: _a(a)
	{
		cout << "A():" << this << endl;
	}
	~A()
	{
		cout << "~A():" << this << endl;
	}
private:
	int _a;
};
// 定位new/replacement new
int main()
{
	// p1现在指向的只不过是与A对象相同大小的一段空间，还不能算是一个对象，因为构造函数没有执行
		A* p1 = (A*)malloc(sizeof(A));
	new(p1)A;  // 注意：如果A类的构造函数有参数时，此处需要传参
	p1->~A();
	free(p1);
	A* p2 = (A*)operator new(sizeof(A));
	new(p2)A(10);
	p2->~A();
	operator delete(p2);
	return 0;
}
